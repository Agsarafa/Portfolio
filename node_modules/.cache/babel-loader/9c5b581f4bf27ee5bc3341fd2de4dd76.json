{"ast":null,"code":"var _jsxFileName = \"/Users/andrewsarafa/Documents/ReactApp/robofriends/src/Containers/App.js\";\nimport React, { Component } from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox'; //import {robots} from '../Components/Robots' // no longer need this since we are using an API\n\nimport '../Containers/App';\nimport Scroll from '../Components/Scroll';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.onSearchChange = event => {\n      //passing this down to the searchbox and the search box lets the app know there has been a change.\n      this.setState({\n        searchfield: event.target.value\n      });\n    };\n\n    this.state = {\n      robots: [],\n      //This is where the API will do a GET request from an API.\n      searchfield: ''\n    }; //we have two states that are owned by App and anything in the app can use the object states. React uses the states to update\n    //the states of the view.\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users') //get the users\n    .then(response => response.json()) //get the responses\n    .then(users => this.setState({\n      robots: users\n    })); //update the users\n  }\n\n  render() {\n    const {\n      robots,\n      searchfield\n    } = this.state;\n    const filteredRobots = robots.filter(robots => {\n      //we filter the robots state to only include what is in the searchfield.\n      return robots.name.toLowerCase().includes(searchfield.toLowerCase());\n    }); //Now filtered robots can be passed to the cardlist\n\n    return !robots.length ?\n    /*#__PURE__*/\n    // Checking timeing and automatically if it is zero (true) return false. Using conditional\n    _jsxDEV(\"h1\", {\n      children: \"Getting your friends!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tc\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"f1 Head\",\n        children: \" RoboFriends \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n        searchChange: this.onSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Scroll, {\n        children: /*#__PURE__*/_jsxDEV(CardList, {\n          robots: filteredRobots\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default App; //Use STATE to send data up to the parent to change things on the view. Simply an object.\n//State in this case is the robots and we are able to change what Robots array means. Props are simple things that come out of state\n// STATE >> props. Parent sends the STATE to the child compenant that cannot change it but updates the view. \n// STATE is something that can change and change our app. It is a smart compenant\n//Event.target.value just gives the value for the event that is happening \n// Cardlist is being passed with the state and searchBox is being given the object of onSearchChange function to be passed.\n//if you make your own thing make sure to make it a function","map":{"version":3,"names":["React","Component","CardList","SearchBox","Scroll","App","constructor","onSearchChange","event","setState","searchfield","target","value","state","robots","componentDidMount","fetch","then","response","json","users","render","filteredRobots","filter","name","toLowerCase","includes","length"],"sources":["/Users/andrewsarafa/Documents/ReactApp/robofriends/src/Containers/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\n//import {robots} from '../Components/Robots' // no longer need this since we are using an API\nimport '../Containers/App';\nimport Scroll from '../Components/Scroll';\nimport './App.css'\n\nclass App extends Component {\n    constructor() { \n        super()\n        this.state = {\n            robots: [], //This is where the API will do a GET request from an API.\n            searchfield: ''\n        } //we have two states that are owned by App and anything in the app can use the object states. React uses the states to update\n        //the states of the view.\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users') //get the users\n            .then(response => response.json()) //get the responses\n            .then(users => this.setState({robots: users})) //update the users\n    }\n\n    onSearchChange = (event) => { //passing this down to the searchbox and the search box lets the app know there has been a change.\n        this.setState({searchfield: event.target.value})\n    };\n\n    render () {\n        const {robots, searchfield } = this.state;\n        const filteredRobots = robots.filter(robots => { //we filter the robots state to only include what is in the searchfield.\n            return robots.name.toLowerCase().includes(searchfield.toLowerCase());\n        }); //Now filtered robots can be passed to the cardlist\n            return !robots.length ?  // Checking timeing and automatically if it is zero (true) return false. Using conditional\n            <h1>Getting your friends!</h1> :\n            (\n                <div className='tc'>\n                    <h1 className=\"f1 Head\"> RoboFriends </h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <CardList robots={filteredRobots}/> \n                    </Scroll>\n                </div>\n            );\n    }\n}\n\n\n\nexport default App;\n\n//Use STATE to send data up to the parent to change things on the view. Simply an object.\n//State in this case is the robots and we are able to change what Robots array means. Props are simple things that come out of state\n// STATE >> props. Parent sends the STATE to the child compenant that cannot change it but updates the view. \n// STATE is something that can change and change our app. It is a smart compenant\n//Event.target.value just gives the value for the event that is happening \n// Cardlist is being passed with the state and searchBox is being given the object of onSearchChange function to be passed.\n//if you make your own thing make sure to make it a function"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB,C,CACA;;AACA,OAAO,mBAAP;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAO,WAAP;;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;EACxBK,WAAW,GAAG;IACV;;IADU,KAedC,cAfc,GAeIC,KAAD,IAAW;MAAE;MAC1B,KAAKC,QAAL,CAAc;QAACC,WAAW,EAAEF,KAAK,CAACG,MAAN,CAAaC;MAA3B,CAAd;IACH,CAjBa;;IAEV,KAAKC,KAAL,GAAa;MACTC,MAAM,EAAE,EADC;MACG;MACZJ,WAAW,EAAE;IAFJ,CAAb,CAFU,CAKR;IACF;EACH;;EAEDK,iBAAiB,GAAG;IAChBC,KAAK,CAAC,4CAAD,CAAL,CAAoD;IAApD,CACKC,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EACuC;IADvC,CAEKF,IAFL,CAEUG,KAAK,IAAI,KAAKX,QAAL,CAAc;MAACK,MAAM,EAAEM;IAAT,CAAd,CAFnB,EADgB,CAGmC;EACtD;;EAMDC,MAAM,GAAI;IACN,MAAM;MAACP,MAAD;MAASJ;IAAT,IAAyB,KAAKG,KAApC;IACA,MAAMS,cAAc,GAAGR,MAAM,CAACS,MAAP,CAAcT,MAAM,IAAI;MAAE;MAC7C,OAAOA,MAAM,CAACU,IAAP,CAAYC,WAAZ,GAA0BC,QAA1B,CAAmChB,WAAW,CAACe,WAAZ,EAAnC,CAAP;IACH,CAFsB,CAAvB,CAFM,CAIF;;IACA,OAAO,CAACX,MAAM,CAACa,MAAR;IAAA;IAAkB;IACzB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADO,gBAGH;MAAK,SAAS,EAAC,IAAf;MAAA,wBACI;QAAI,SAAS,EAAC,SAAd;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI,QAAC,SAAD;QAAW,YAAY,EAAE,KAAKpB;MAA9B;QAAA;QAAA;QAAA;MAAA,QAFJ,eAGI,QAAC,MAAD;QAAA,uBACI,QAAC,QAAD;UAAU,MAAM,EAAEe;QAAlB;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QAHJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAHJ;EAWP;;AApCuB;;AAyC5B,eAAejB,GAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}