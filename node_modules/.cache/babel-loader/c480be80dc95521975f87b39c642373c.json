{"ast":null,"code":"import _classCallCheck from \"/Users/andrewsarafa/Documents/ReactApp/Portfolio/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/andrewsarafa/Documents/ReactApp/Portfolio/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/andrewsarafa/Documents/ReactApp/Portfolio/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/andrewsarafa/Documents/ReactApp/Portfolio/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/andrewsarafa/Documents/ReactApp/Portfolio/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/andrewsarafa/Documents/ReactApp/Portfolio/Portfolio/src/Containers/App.js\";\nimport React, { Component } from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox'; //import {robots} from '../Components/Robots' // no longer need this since we are using an API\n\nimport '../Containers/App';\nimport Scroll from '../Components/Scroll';\nimport ErrorBoundry from '../Components/ErrorBoundry';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n\n    _this.onSearchChange = function (event) {\n      //passing this down to the searchbox and the search box lets the app know there has been a change.\n      _this.setState({\n        searchfield: event.target.value\n      });\n    };\n\n    _this.state = {\n      robots: [],\n      //This is where the API will do a GET request from an API.\n      searchfield: ''\n    }; //we have two states that are owned by App and anything in the app can use the object states. React uses the states to update\n    //the states of the view.\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch('https://jsonplaceholder.typicode.com/users') //get the users\n      .then(function (response) {\n        return response.json();\n      }) //get the responses\n      .then(function (users) {\n        return _this2.setState({\n          robots: users\n        });\n      }); //update the users\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          robots = _this$state.robots,\n          searchfield = _this$state.searchfield;\n      var filteredRobots = robots.filter(function (robots) {\n        //we filter the robots state to only include what is in the searchfield.\n        return robots.name.toLowerCase().includes(searchfield.toLowerCase());\n      }); //Now filtered robots can be passed to the cardlist\n\n      return !robots.length ?\n      /*#__PURE__*/\n      // Checking timeing and automatically if it is zero (true) return false. Using conditional\n      React.createElement(\"h1\", {\n        className: \"tc f1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }\n      }, \"Getting your friends!\") : /*#__PURE__*/React.createElement(\"div\", {\n        className: \"tc\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"style\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }\n      }, \"@import url('https://fonts.googleapis.com/css2?family=Libre+Barcode+39+Text&display=swap');\"), /*#__PURE__*/React.createElement(\"h1\", {\n        className: \"f1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }\n      }, \" RoboFriends \"), /*#__PURE__*/React.createElement(SearchBox, {\n        searchChange: this.onSearchChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Scroll, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(ErrorBoundry, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(CardList, {\n        robots: filteredRobots,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App; //Use STATE to send data up to the parent to change things on the view. Simply an object.\n//State in this case is the robots and we are able to change what Robots array means. Props are simple things that come out of state\n// STATE >> props. Parent sends the STATE to the child compenant that cannot change it but updates the view. \n// STATE is something that can change and change our app. It is a smart compenant\n//Event.target.value just gives the value for the event that is happening \n// Cardlist is being passed with the state and searchBox is being given the object of onSearchChange function to be passed.\n//if you make your own thing make sure to make it a function\n//Wrapped ErrorBoundry to the Cardlist since it is going to catch anything that false in the child.","map":{"version":3,"names":["React","Component","CardList","SearchBox","Scroll","ErrorBoundry","App","onSearchChange","event","setState","searchfield","target","value","state","robots","fetch","then","response","json","users","filteredRobots","filter","name","toLowerCase","includes","length"],"sources":["/Users/andrewsarafa/Documents/ReactApp/Portfolio/Portfolio/src/Containers/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\n//import {robots} from '../Components/Robots' // no longer need this since we are using an API\nimport '../Containers/App';\nimport Scroll from '../Components/Scroll';\nimport ErrorBoundry from '../Components/ErrorBoundry';\n\n\nclass App extends Component {\n    constructor() { \n        super()\n        this.state = {\n            robots: [], //This is where the API will do a GET request from an API.\n            searchfield: ''\n        } //we have two states that are owned by App and anything in the app can use the object states. React uses the states to update\n        //the states of the view.\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users') //get the users\n            .then(response => response.json()) //get the responses\n            .then(users => this.setState({robots: users})) //update the users\n    }\n\n    onSearchChange = (event) => { //passing this down to the searchbox and the search box lets the app know there has been a change.\n        this.setState({searchfield: event.target.value})\n    };\n\n    render () {\n        const {robots, searchfield } = this.state;\n        const filteredRobots = robots.filter(robots => { //we filter the robots state to only include what is in the searchfield.\n            return robots.name.toLowerCase().includes(searchfield.toLowerCase());\n        }); //Now filtered robots can be passed to the cardlist\n            return !robots.length ?  // Checking timeing and automatically if it is zero (true) return false. Using conditional\n            <h1 className=\"tc f1\">Getting your friends!</h1> :\n            (\n                <div className='tc'>\n                    <style>\n                    @import url('https://fonts.googleapis.com/css2?family=Libre+Barcode+39+Text&display=swap');\n                    </style>\n                    <h1 className=\"f1\"> RoboFriends </h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundry> \n                        <CardList robots={filteredRobots}/> \n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            );\n    }\n}\n\n\n\nexport default App;\n\n//Use STATE to send data up to the parent to change things on the view. Simply an object.\n//State in this case is the robots and we are able to change what Robots array means. Props are simple things that come out of state\n// STATE >> props. Parent sends the STATE to the child compenant that cannot change it but updates the view. \n// STATE is something that can change and change our app. It is a smart compenant\n//Event.target.value just gives the value for the event that is happening \n// Cardlist is being passed with the state and searchBox is being given the object of onSearchChange function to be passed.\n//if you make your own thing make sure to make it a function\n\n//Wrapped ErrorBoundry to the Cardlist since it is going to catch anything that false in the child."],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB,C,CACA;;AACA,OAAO,mBAAP;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;;IAGMC,G;;;EACF,eAAc;IAAA;;IAAA;;IACV;;IADU,MAedC,cAfc,GAeG,UAACC,KAAD,EAAW;MAAE;MAC1B,MAAKC,QAAL,CAAc;QAACC,WAAW,EAAEF,KAAK,CAACG,MAAN,CAAaC;MAA3B,CAAd;IACH,CAjBa;;IAEV,MAAKC,KAAL,GAAa;MACTC,MAAM,EAAE,EADC;MACG;MACZJ,WAAW,EAAE;IAFJ,CAAb,CAFU,CAKR;IACF;;IANU;EAOb;;;;wCAEmB;MAAA;;MAChBK,KAAK,CAAC,4CAAD,CAAL,CAAoD;MAApD,CACKC,IADL,CACU,UAAAC,QAAQ;QAAA,OAAIA,QAAQ,CAACC,IAAT,EAAJ;MAAA,CADlB,EACuC;MADvC,CAEKF,IAFL,CAEU,UAAAG,KAAK;QAAA,OAAI,MAAI,CAACV,QAAL,CAAc;UAACK,MAAM,EAAEK;QAAT,CAAd,CAAJ;MAAA,CAFf,EADgB,CAGmC;IACtD;;;6BAMS;MAAA,kBACyB,KAAKN,KAD9B;MAAA,IACCC,MADD,eACCA,MADD;MAAA,IACSJ,WADT,eACSA,WADT;MAEN,IAAMU,cAAc,GAAGN,MAAM,CAACO,MAAP,CAAc,UAAAP,MAAM,EAAI;QAAE;QAC7C,OAAOA,MAAM,CAACQ,IAAP,CAAYC,WAAZ,GAA0BC,QAA1B,CAAmCd,WAAW,CAACa,WAAZ,EAAnC,CAAP;MACH,CAFsB,CAAvB,CAFM,CAIF;;MACA,OAAO,CAACT,MAAM,CAACW,MAAR;MAAA;MAAkB;MACzB;QAAI,SAAS,EAAC,OAAd;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,2BADO,gBAGH;QAAK,SAAS,EAAC,IAAf;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACI;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,iGADJ,eAII;QAAI,SAAS,EAAC,IAAd;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,mBAJJ,eAKI,oBAAC,SAAD;QAAW,YAAY,EAAE,KAAKlB,cAA9B;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EALJ,eAMI,oBAAC,MAAD;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACI,oBAAC,YAAD;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACA,oBAAC,QAAD;QAAU,MAAM,EAAEa,cAAlB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EADA,CADJ,CANJ,CAHJ;IAgBP;;;;EAzCanB,S;;AA8ClB,eAAeK,GAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module"}