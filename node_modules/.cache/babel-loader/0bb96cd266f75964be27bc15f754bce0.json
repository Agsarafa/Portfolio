{"ast":null,"code":"var _jsxFileName = \"/Users/andrewsarafa/Documents/ReactApp/robofriends/src/App.js\";\nimport React, { Component } from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport { robots } from './Robots';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.onSearchChange = event => {\n      //passing this down to the searchbox and the search box lets the app know there has been a change.\n      this.setState({\n        searchfield: event.target.value\n      });\n    };\n\n    this.state = {\n      robots: robots,\n      searchfield: ''\n    }; //we have two states that are owned by App and anything in the app can use the object states. React uses the states to update\n    //the states of the view.\n  }\n\n  render() {\n    const filteredRobots = this.state.robots.filter(robots => {\n      //we filter the robots state to only include what is in the searchfield.\n      return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n    }); //Now filtered robots can be passed to the cardlist\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tc\",\n      children: [/*#__PURE__*/_jsxDEV(\"head\", {\n        children: [/*#__PURE__*/_jsxDEV(\"link\", {\n          rel: \"preconnect\",\n          href: \"https://fonts.googleapis.com\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"link\", {\n          rel: \"preconnect\",\n          href: \"https://fonts.gstatic.com\",\n          crossorigin: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"link\", {\n          href: \"https://fonts.googleapis.com/css2?family=Libre+Barcode+39+Text&display=swap\",\n          rel: \"stylesheet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"f1\",\n        children: \" RoboFriends! \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n        searchChange: this.onSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardList, {\n        robots: filteredRobots\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App; //Use STATE to send data up to the parent to change things on the view. Simply an object.\n//State in this case is the robots and we are able to change what Robots array means. Props are simple things that come out of state\n// STATE >> props. Parent sends the STATE to the child compenant that cannot change it but updates the view. \n// STATE is something that can change and change our app.\n//Event.target.value just gives the value for the event that is happening \n// Cardlist is being passed with the state and searchBox is being given the object of onSearchChange function to be passed.\n//if you make your own thing make sure to make it a function","map":{"version":3,"names":["React","Component","CardList","SearchBox","robots","App","constructor","onSearchChange","event","setState","searchfield","target","value","state","render","filteredRobots","filter","name","toLowerCase","includes"],"sources":["/Users/andrewsarafa/Documents/ReactApp/robofriends/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport {robots} from './Robots'\nimport './App.css';\n\nclass App extends Component {\n    constructor() { \n        super()\n        this.state = {\n            robots: robots,\n            searchfield: ''\n        } //we have two states that are owned by App and anything in the app can use the object states. React uses the states to update\n        //the states of the view.\n    }\n\n    onSearchChange = (event) => { //passing this down to the searchbox and the search box lets the app know there has been a change.\n        this.setState({searchfield: event.target.value})\n    };\n\n    render () {\n        const filteredRobots = this.state.robots.filter(robots => { //we filter the robots state to only include what is in the searchfield.\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        }) //Now filtered robots can be passed to the cardlist\n        return (\n            <div className='tc'>\n                <head>   \n                <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"></link>\n                <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin></link>\n                <link href=\"https://fonts.googleapis.com/css2?family=Libre+Barcode+39+Text&display=swap\" rel=\"stylesheet\"></link>\n                </head>\n                <h1 className=\"f1\"> RoboFriends! </h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <CardList robots={filteredRobots}/> \n            </div>\n        );\n        }\n}\n\nexport default App;\n\n//Use STATE to send data up to the parent to change things on the view. Simply an object.\n//State in this case is the robots and we are able to change what Robots array means. Props are simple things that come out of state\n// STATE >> props. Parent sends the STATE to the child compenant that cannot change it but updates the view. \n// STATE is something that can change and change our app.\n//Event.target.value just gives the value for the event that is happening \n// Cardlist is being passed with the state and searchBox is being given the object of onSearchChange function to be passed.\n//if you make your own thing make sure to make it a function"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAAQC,MAAR,QAAqB,UAArB;AACA,OAAO,WAAP;;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;EACxBK,WAAW,GAAG;IACV;;IADU,KASdC,cATc,GASIC,KAAD,IAAW;MAAE;MAC1B,KAAKC,QAAL,CAAc;QAACC,WAAW,EAAEF,KAAK,CAACG,MAAN,CAAaC;MAA3B,CAAd;IACH,CAXa;;IAEV,KAAKC,KAAL,GAAa;MACTT,MAAM,EAAEA,MADC;MAETM,WAAW,EAAE;IAFJ,CAAb,CAFU,CAKR;IACF;EACH;;EAMDI,MAAM,GAAI;IACN,MAAMC,cAAc,GAAG,KAAKF,KAAL,CAAWT,MAAX,CAAkBY,MAAlB,CAAyBZ,MAAM,IAAI;MAAE;MACxD,OAAOA,MAAM,CAACa,IAAP,CAAYC,WAAZ,GAA0BC,QAA1B,CAAmC,KAAKN,KAAL,CAAWH,WAAX,CAAuBQ,WAAvB,EAAnC,CAAP;IACH,CAFsB,CAAvB,CADM,CAGH;;IACH,oBACI;MAAK,SAAS,EAAC,IAAf;MAAA,wBACI;QAAA,wBACA;UAAM,GAAG,EAAC,YAAV;UAAuB,IAAI,EAAC;QAA5B;UAAA;UAAA;UAAA;QAAA,QADA,eAEA;UAAM,GAAG,EAAC,YAAV;UAAuB,IAAI,EAAC,2BAA5B;UAAwD,WAAW;QAAnE;UAAA;UAAA;UAAA;QAAA,QAFA,eAGA;UAAM,IAAI,EAAC,6EAAX;UAAyF,GAAG,EAAC;QAA7F;UAAA;UAAA;UAAA;QAAA,QAHA;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAMI;QAAI,SAAS,EAAC,IAAd;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QANJ,eAOI,QAAC,SAAD;QAAW,YAAY,EAAE,KAAKX;MAA9B;QAAA;QAAA;QAAA;MAAA,QAPJ,eAQI,QAAC,QAAD;QAAU,MAAM,EAAEQ;MAAlB;QAAA;QAAA;QAAA;MAAA,QARJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ;EAYC;;AA9BmB;;AAiC5B,eAAeV,GAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}