{"ast":null,"code":"import _classCallCheck from\"/Users/andrewsarafa/Documents/ReactApp/robofriends/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/andrewsarafa/Documents/ReactApp/robofriends/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/Users/andrewsarafa/Documents/ReactApp/robofriends/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/andrewsarafa/Documents/ReactApp/robofriends/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React,{Component}from'react';import CardList from'../Components/CardList';import SearchBox from'../Components/SearchBox';//import {robots} from '../Components/Robots' // no longer need this since we are using an API\nimport'../Containers/App';import Scroll from'../Components/Scroll';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(){var _this;_classCallCheck(this,App);_this=_super.call(this);_this.onSearchChange=function(event){//passing this down to the searchbox and the search box lets the app know there has been a change.\n_this.setState({searchfield:event.target.value});};_this.state={robots:[],//This is where the API will do a GET request from an API.\nsearchfield:''};//we have two states that are owned by App and anything in the app can use the object states. React uses the states to update\n//the states of the view.\nreturn _this;}_createClass(App,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;fetch('https://jsonplaceholder.typicode.com/users')//get the users\n.then(function(response){return response.json();})//get the responses\n.then(function(users){return _this2.setState({robots:users});});//update the users\n}},{key:\"render\",value:function render(){var _this$state=this.state,robots=_this$state.robots,searchfield=_this$state.searchfield;var filteredRobots=robots.filter(function(robots){//we filter the robots state to only include what is in the searchfield.\nreturn robots.name.toLowerCase().includes(searchfield.toLowerCase());});//Now filtered robots can be passed to the cardlist\nreturn!robots.length?/*#__PURE__*/ // Checking timeing and automatically if it is zero (true) return false. Using conditional\n_jsx(\"h1\",{children:\"Getting your friends!\"}):/*#__PURE__*/_jsxs(\"div\",{className:\"tc\",children:[/*#__PURE__*/_jsxs(\"head\",{children:[/*#__PURE__*/_jsx(\"link\",{rel:\"preconnect\",href:\"https://fonts.googleapis.com\"}),/*#__PURE__*/_jsx(\"link\",{rel:\"preconnect\",href:\"https://fonts.gstatic.com\"}),/*#__PURE__*/_jsx(\"link\",{href:\"https://fonts.googleapis.com/css2?family=Libre+Barcode+39+Text&display=swap\",rel:\"stylesheet\"})]}),/*#__PURE__*/_jsx(\"h1\",{className:\"f1\",children:\" RoboFriends \"}),/*#__PURE__*/_jsx(SearchBox,{searchChange:this.onSearchChange}),/*#__PURE__*/_jsx(Scroll,{children:/*#__PURE__*/_jsx(CardList,{robots:filteredRobots})})]});}}]);return App;}(Component);export default App;//Use STATE to send data up to the parent to change things on the view. Simply an object.\n//State in this case is the robots and we are able to change what Robots array means. Props are simple things that come out of state\n// STATE >> props. Parent sends the STATE to the child compenant that cannot change it but updates the view. \n// STATE is something that can change and change our app. It is a smart compenant\n//Event.target.value just gives the value for the event that is happening \n// Cardlist is being passed with the state and searchBox is being given the object of onSearchChange function to be passed.\n//if you make your own thing make sure to make it a function","map":{"version":3,"names":["React","Component","CardList","SearchBox","Scroll","App","onSearchChange","event","setState","searchfield","target","value","state","robots","fetch","then","response","json","users","filteredRobots","filter","name","toLowerCase","includes","length"],"sources":["/Users/andrewsarafa/Documents/ReactApp/robofriends/src/Containers/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\n//import {robots} from '../Components/Robots' // no longer need this since we are using an API\nimport '../Containers/App';\nimport Scroll from '../Components/Scroll';\n\nclass App extends Component {\n    constructor() { \n        super()\n        this.state = {\n            robots: [], //This is where the API will do a GET request from an API.\n            searchfield: ''\n        } //we have two states that are owned by App and anything in the app can use the object states. React uses the states to update\n        //the states of the view.\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users') //get the users\n            .then(response => response.json()) //get the responses\n            .then(users => this.setState({robots: users})) //update the users\n    }\n\n    onSearchChange = (event) => { //passing this down to the searchbox and the search box lets the app know there has been a change.\n        this.setState({searchfield: event.target.value})\n    };\n\n    render () {\n        const {robots, searchfield } = this.state;\n        const filteredRobots = robots.filter(robots => { //we filter the robots state to only include what is in the searchfield.\n            return robots.name.toLowerCase().includes(searchfield.toLowerCase());\n        }); //Now filtered robots can be passed to the cardlist\n            return !robots.length ?  // Checking timeing and automatically if it is zero (true) return false. Using conditional\n            <h1>Getting your friends!</h1> :\n            (\n                <div className='tc'>\n                    <head>   \n                    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"></link>\n                    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" ></link>\n                    <link href=\"https://fonts.googleapis.com/css2?family=Libre+Barcode+39+Text&display=swap\" rel=\"stylesheet\"></link>\n                    </head>\n                    <h1 className=\"f1\"> RoboFriends </h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <CardList robots={filteredRobots}/> \n                    </Scroll>\n                </div>\n            );\n    }\n}\n\n\n\nexport default App;\n\n//Use STATE to send data up to the parent to change things on the view. Simply an object.\n//State in this case is the robots and we are able to change what Robots array means. Props are simple things that come out of state\n// STATE >> props. Parent sends the STATE to the child compenant that cannot change it but updates the view. \n// STATE is something that can change and change our app. It is a smart compenant\n//Event.target.value just gives the value for the event that is happening \n// Cardlist is being passed with the state and searchBox is being given the object of onSearchChange function to be passed.\n//if you make your own thing make sure to make it a function"],"mappings":"ghBAAA,MAAOA,MAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,SAAP,KAAqB,wBAArB,CACA,MAAOC,UAAP,KAAsB,yBAAtB,CACA;AACA,MAAO,mBAAP,CACA,MAAOC,OAAP,KAAmB,sBAAnB,C,2FAEMC,I,0FACF,cAAc,qCACV,wBADU,MAedC,cAfc,CAeG,SAACC,KAAD,CAAW,CAAE;AAC1B,MAAKC,QAAL,CAAc,CAACC,WAAW,CAAEF,KAAK,CAACG,MAAN,CAAaC,KAA3B,CAAd,EACH,CAjBa,CAEV,MAAKC,KAAL,CAAa,CACTC,MAAM,CAAE,EADC,CACG;AACZJ,WAAW,CAAE,EAFJ,CAAb,CAGE;AACF;AANU,aAOb,C,iDAED,4BAAoB,iBAChBK,KAAK,CAAC,4CAAD,CAA+C;AAApD,CACKC,IADL,CACU,SAAAC,QAAQ,QAAIA,SAAQ,CAACC,IAAT,EAAJ,EADlB,CACuC;AADvC,CAEKF,IAFL,CAEU,SAAAG,KAAK,QAAI,OAAI,CAACV,QAAL,CAAc,CAACK,MAAM,CAAEK,KAAT,CAAd,CAAJ,EAFf,EAEmD;AACtD,C,sBAMD,iBAAU,CACN,gBAA+B,KAAKN,KAApC,CAAOC,MAAP,aAAOA,MAAP,CAAeJ,WAAf,aAAeA,WAAf,CACA,GAAMU,eAAc,CAAGN,MAAM,CAACO,MAAP,CAAc,SAAAP,MAAM,CAAI,CAAE;AAC7C,MAAOA,OAAM,CAACQ,IAAP,CAAYC,WAAZ,GAA0BC,QAA1B,CAAmCd,WAAW,CAACa,WAAZ,EAAnC,CAAP,CACH,CAFsB,CAAvB,CAEI;AACA,MAAO,CAACT,MAAM,CAACW,MAAR,eAAkB;AACzB,6CADO,cAGH,aAAK,SAAS,CAAC,IAAf,wBACI,qCACA,aAAM,GAAG,CAAC,YAAV,CAAuB,IAAI,CAAC,8BAA5B,EADA,cAEA,aAAM,GAAG,CAAC,YAAV,CAAuB,IAAI,CAAC,2BAA5B,EAFA,cAGA,aAAM,IAAI,CAAC,6EAAX,CAAyF,GAAG,CAAC,YAA7F,EAHA,GADJ,cAMI,WAAI,SAAS,CAAC,IAAd,2BANJ,cAOI,KAAC,SAAD,EAAW,YAAY,CAAE,KAAKlB,cAA9B,EAPJ,cAQI,KAAC,MAAD,wBACI,KAAC,QAAD,EAAU,MAAM,CAAEa,cAAlB,EADJ,EARJ,GAHJ,CAgBP,C,iBAzCalB,S,EA8ClB,cAAeI,IAAf,CAEA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}