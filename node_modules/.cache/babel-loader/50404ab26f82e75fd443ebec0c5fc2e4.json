{"ast":null,"code":"var _jsxFileName = \"/Users/andrewsarafa/Documents/ReactApp/robofriends/src/App.js\";\nimport React, { Component } from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport { robots } from './Robots';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.onSearchChange = event => {\n      //passing this down to the searchbox and the search box lets the app know there has been a change.\n      this.setState({\n        searchfield: event.target.value\n      });\n    };\n\n    this.state = {\n      robots: [],\n      //This is where the API will do a GET request from an API.\n      searchfield: ''\n    }; //we have two states that are owned by App and anything in the app can use the object states. React uses the states to update\n    //the states of the view.\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users') //get the users\n    .then(response => response.json()) //get the responses\n    .then(users => this.setState({\n      robots: users\n    })); //update the users\n  }\n\n  render() {\n    const filteredRobots = this.state.robots.filter(robots => {\n      //we filter the robots state to only include what is in the searchfield.\n      return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n    }); //Now filtered robots can be passed to the cardlist\n\n    if (this.state.robots.length === 0) {\n      // Checking timeing \n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Getting your friends!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tc\",\n        children: [/*#__PURE__*/_jsxDEV(\"head\", {\n          children: [/*#__PURE__*/_jsxDEV(\"link\", {\n            rel: \"preconnect\",\n            href: \"https://fonts.googleapis.com\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"link\", {\n            rel: \"preconnect\",\n            href: \"https://fonts.gstatic.com\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"link\", {\n            href: \"https://fonts.googleapis.com/css2?family=Libre+Barcode+39+Text&display=swap\",\n            rel: \"stylesheet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"f1\",\n          children: \" RoboFriends \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n          searchChange: this.onSearchChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(CardList, {\n          robots: filteredRobots\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this);\n    }\n  }\n\n}\n\nexport default App; //Use STATE to send data up to the parent to change things on the view. Simply an object.\n//State in this case is the robots and we are able to change what Robots array means. Props are simple things that come out of state\n// STATE >> props. Parent sends the STATE to the child compenant that cannot change it but updates the view. \n// STATE is something that can change and change our app. It is a smart compenant\n//Event.target.value just gives the value for the event that is happening \n// Cardlist is being passed with the state and searchBox is being given the object of onSearchChange function to be passed.\n//if you make your own thing make sure to make it a function","map":{"version":3,"names":["React","Component","CardList","SearchBox","robots","App","constructor","onSearchChange","event","setState","searchfield","target","value","state","componentDidMount","fetch","then","response","json","users","render","filteredRobots","filter","name","toLowerCase","includes","length"],"sources":["/Users/andrewsarafa/Documents/ReactApp/robofriends/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport {robots} from './Robots'\nimport './App.css';\n\nclass App extends Component {\n    constructor() { \n        super()\n        this.state = {\n            robots: [], //This is where the API will do a GET request from an API.\n            searchfield: ''\n        } //we have two states that are owned by App and anything in the app can use the object states. React uses the states to update\n        //the states of the view.\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users') //get the users\n            .then(response => response.json()) //get the responses\n            .then(users => this.setState({robots: users})) //update the users\n    }\n\n    onSearchChange = (event) => { //passing this down to the searchbox and the search box lets the app know there has been a change.\n        this.setState({searchfield: event.target.value})\n    };\n\n    render () {\n        const filteredRobots = this.state.robots.filter(robots => { //we filter the robots state to only include what is in the searchfield.\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        }) //Now filtered robots can be passed to the cardlist\n        if (this.state.robots.length === 0){ // Checking timeing \n            return <h1>Getting your friends!</h1>\n        } else {\n        return (\n            <div className='tc'>\n                <head>   \n                <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"></link>\n                <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" ></link>\n                <link href=\"https://fonts.googleapis.com/css2?family=Libre+Barcode+39+Text&display=swap\" rel=\"stylesheet\"></link>\n                </head>\n                <h1 className=\"f1\"> RoboFriends </h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <CardList robots={filteredRobots}/> \n            </div>\n        );\n        }\n    }\n}\n\nexport default App;\n\n//Use STATE to send data up to the parent to change things on the view. Simply an object.\n//State in this case is the robots and we are able to change what Robots array means. Props are simple things that come out of state\n// STATE >> props. Parent sends the STATE to the child compenant that cannot change it but updates the view. \n// STATE is something that can change and change our app. It is a smart compenant\n//Event.target.value just gives the value for the event that is happening \n// Cardlist is being passed with the state and searchBox is being given the object of onSearchChange function to be passed.\n//if you make your own thing make sure to make it a function"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAAQC,MAAR,QAAqB,UAArB;AACA,OAAO,WAAP;;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;EACxBK,WAAW,GAAG;IACV;;IADU,KAedC,cAfc,GAeIC,KAAD,IAAW;MAAE;MAC1B,KAAKC,QAAL,CAAc;QAACC,WAAW,EAAEF,KAAK,CAACG,MAAN,CAAaC;MAA3B,CAAd;IACH,CAjBa;;IAEV,KAAKC,KAAL,GAAa;MACTT,MAAM,EAAE,EADC;MACG;MACZM,WAAW,EAAE;IAFJ,CAAb,CAFU,CAKR;IACF;EACH;;EAEDI,iBAAiB,GAAG;IAChBC,KAAK,CAAC,4CAAD,CAAL,CAAoD;IAApD,CACKC,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EACuC;IADvC,CAEKF,IAFL,CAEUG,KAAK,IAAI,KAAKV,QAAL,CAAc;MAACL,MAAM,EAAEe;IAAT,CAAd,CAFnB,EADgB,CAGmC;EACtD;;EAMDC,MAAM,GAAI;IACN,MAAMC,cAAc,GAAG,KAAKR,KAAL,CAAWT,MAAX,CAAkBkB,MAAlB,CAAyBlB,MAAM,IAAI;MAAE;MACxD,OAAOA,MAAM,CAACmB,IAAP,CAAYC,WAAZ,GAA0BC,QAA1B,CAAmC,KAAKZ,KAAL,CAAWH,WAAX,CAAuBc,WAAvB,EAAnC,CAAP;IACH,CAFsB,CAAvB,CADM,CAGH;;IACH,IAAI,KAAKX,KAAL,CAAWT,MAAX,CAAkBsB,MAAlB,KAA6B,CAAjC,EAAmC;MAAE;MACjC,oBAAO;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAP;IACH,CAFD,MAEO;MACP,oBACI;QAAK,SAAS,EAAC,IAAf;QAAA,wBACI;UAAA,wBACA;YAAM,GAAG,EAAC,YAAV;YAAuB,IAAI,EAAC;UAA5B;YAAA;YAAA;YAAA;UAAA,QADA,eAEA;YAAM,GAAG,EAAC,YAAV;YAAuB,IAAI,EAAC;UAA5B;YAAA;YAAA;YAAA;UAAA,QAFA,eAGA;YAAM,IAAI,EAAC,6EAAX;YAAyF,GAAG,EAAC;UAA7F;YAAA;YAAA;YAAA;UAAA,QAHA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAMI;UAAI,SAAS,EAAC,IAAd;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QANJ,eAOI,QAAC,SAAD;UAAW,YAAY,EAAE,KAAKnB;QAA9B;UAAA;UAAA;UAAA;QAAA,QAPJ,eAQI,QAAC,QAAD;UAAU,MAAM,EAAEc;QAAlB;UAAA;UAAA;UAAA;QAAA,QARJ;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ;IAYC;EACJ;;AAxCuB;;AA2C5B,eAAehB,GAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}